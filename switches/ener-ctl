#!/usr/bin/python

#import the required modules
import RPi.GPIO as GPIO
import time
import sys

def init():
	# set the pins numbering mode
	GPIO.setmode(GPIO.BOARD)

	# Select the GPIO pins used for the encoder K0-K3 data inputs
	GPIO.setup(11, GPIO.OUT)
	GPIO.setup(15, GPIO.OUT)
	GPIO.setup(16, GPIO.OUT)
	GPIO.setup(13, GPIO.OUT)

	# Select the signal to select ASK/FSK
	GPIO.setup(18, GPIO.OUT)

	# Select the signal used to enable/disable the modulator
	GPIO.setup(22, GPIO.OUT)

	# Disable the modulator by setting CE pin lo
	GPIO.output (22, False)

	# Set the modulator to ASK for On Off Keying 
	# by setting MODSEL pin lo
	GPIO.output (18, False)

	# Initialise K0-K3 inputs of the encoder to 0000
	GPIO.output (11, False)
	GPIO.output (15, False)
	GPIO.output (16, False)
	GPIO.output (13, False)

def ctrl_socket(socket, on):
	print(socket)
	if socket == 1:
		m = [ True, True, True ]
	elif socket == 2:
		m = [ False, True, True ]
	elif socket == 3:
		m = [ True, False, True ]
	elif socket == 4:
		m = [ False, False, True ]
	elif socket == 0:
		m = [ True, True, False ]
	else:
		raise Exception('Socket must be 0 - 4, where 0 is all sockets')

	# Set K0-K3
	GPIO.output (11, m[0])
	GPIO.output (15, m[1])
	GPIO.output (16, m[2])
	GPIO.output (13, on)
	# let it settle, encoder requires this
	time.sleep(0.1)	
	# Enable the modulator
	GPIO.output (22, True)
	# keep enabled for a period
	time.sleep(0.25)
	# Disable the modulator
	GPIO.output (22, False)

def cleanup():
	GPIO.cleanup()

def help():
	print("ener-ctl <socket> <on|off>")
	exit(1)

if len(sys.argv) != 3:
	help()

s=sys.argv[1]
if s < 0 or s > 4:
	print("Socket must be between 0 and 4")

p=sys.argv[2]

if p == "on":
	poweron=True
elif p == "off":
	poweron=False
else:
	help()

print("Calling ctrl_socket(" + s + "," + str(poweron) + ")")
init()
ctrl_socket(int(s),poweron)
cleanup()

